"# 100 Nock" 

P-001：print(df_receipt.head(10))

P-002:selected_columns = ['sales_ymd', 'customer_id', 'product_cd', 'amount']
df_selected = df_receipt[selected_columns]
print(df_selected.head(10))

P-003:selected_columns = ['sales_ymd', 'customer_id', 'product_cd', 'amount']
df_selected = df_receipt[selected_columns]
df_selected = df_selected.rename(columns={'sales_ymd': 'sales_date'})
print(df_selected.head(10))

P-004:selected_columns = ['sales_ymd', 'customer_id', 'product_cd', 'amount']
condition = df_receipt['customer_id'] == 'CS018205000001'
filtered_data = df_receipt.loc[condition, selected_columns]
print(filtered_data)

P-005:selected_columns = ['sales_ymd', 'customer_id', 'product_cd', 'amount']
condition = (df_receipt['customer_id'] == 'CS018205000001') & (df_receipt['amount'] >= 1000)
filtered_data = df_receipt.loc[condition, selected_columns]
print(filtered_data)

P-006:selected_columns = ['sales_ymd', 'customer_id', 'product_cd', 'quantity', 'amount']
condition = ((df_receipt['customer_id'] == 'CS018205000001') & 
             ((df_receipt['amount'] >= 1000) | (df_receipt['quantity'] >= 5)))
filtered_data = df_receipt.loc[condition, selected_columns]
print(filtered_data)

P-007:selected_columns = ['sales_ymd', 'customer_id', 'product_cd', 'amount']
condition = (df_receipt['customer_id'] == 'CS018205000001') & (df_receipt['amount'] >= 1000) & (df_receipt['amount'] <= 2000)
filtered_data = df_receipt.loc[condition, selected_columns]
print(filtered_data)

P-008:selected_columns = ['sales_ymd', 'customer_id', 'product_cd', 'amount']
condition = (df_receipt['customer_id'] == 'CS018205000001') & (df_receipt['product_cd'] != 'P071401019')
filtered_data = df_receipt.loc[condition, selected_columns]
print(filtered_data)

P-009:df_store.query('not(prefecture_cd == "13") & not(floor_area > 900)')

P-010:filtered_data = df_store[df_store['store_cd'].str.startswith('S14')]
print(filtered_data.head(10))

P-011:filtered_data = df_customer[df_customer['customer_id'].str.endswith('1')]
print(filtered_data.head(10))

P-012:filtered_data = df_store[df_store['address'].str.contains('横浜市')]
print(filtered_data)

P-013:filtered_data = df_customer[df_customer['status_cd'].str.match(r'^[A-F]')]
print(filtered_data.head(10))

P-014:filtered_data = df_customer[df_customer['status_cd'].str.match(r'.*[1-9]$')]
print(filtered_data.head(10))

P-015:filtered_data = df_customer[df_customer['status_cd'].str.match(r'^[A-F].*[1-9]$')]
print(filtered_data.head(10))

P-016:filtered_data = df_store[df_store['tel_no'].str.match(r'\d{3}-\d{3}-\d{4}')]
print(filtered_data)

P-017:sorted_data = df_customer.sort_values(by='birth_day')
print(sorted_data.head(10))

P-018:sorted_data = df_customer.sort_values(by='birth_day', ascending=True)
print(sorted_data.head(10))

P-019:df_receipt['rank'] = df_receipt['amount'].rank(method='min', ascending=False)
top_10 = df_receipt[['customer_id', 'amount', 'rank']].sort_values(by='rank').head(10)
print(top_10)

P-020:df_receipt['rank'] = df_receipt['amount'].rank(method='dense', ascending=False)
top_10 = df_receipt[['customer_id', 'amount', 'rank']].sort_values(by='rank').head(10)
print(top_10)

